number /[0-9]+(\.[0-9]*)?([eE][\+\-]?[0-9]+)?/ text
id /[a-z_][a-z_0-9]*/ text
lparen /\(/
rparen /\)/
comma /,/
add /\+/
sub /\-/
mul /\*/
div /\//
pow /\^/
assign /=/
/ +/

%%

%top {
#include "parserBase.h"
}

%inherit{: public ParserBase}

E ->
    %left1  E add E      { makeExpr(OpType::Add, _1, _3) }
  | %left1  E sub E      { makeExpr(OpType::Sub, _1, _3) }
  | %left2  E mul E      { makeExpr(OpType::Mul, _1, _3) }
  | %left2  E div E      { makeExpr(OpType::Div, _1, _3) }
  | %right4 E pow E      { makeExpr(OpType::Exp, _1, _3) }
  | lparen E rparen      { std::move(_2) }
  | id                   { makeExpr(_1.text) }
  | number               { makeExpr(std::stod(_1.text)) }
  | %left3 sub E         { makeExpr(_2) }
  | %right0 id assign E  { makeExpr(_1.text, std::move(_3)) }
  ;
